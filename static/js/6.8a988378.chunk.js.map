{"version":3,"sources":["components/Login/Login.module.css","components/Login/LoginForm.module.css","components/Login/LoginForm.tsx","components/Login/Login.tsx"],"names":["module","exports","LoginReduxForm","reduxForm","form","handleSubmit","isCaptcha","urlCaptcha","useState","checked","setChecked","s","login__checkbox","activeCheckbox","setActiveCheckbox","className","login__form","onSubmit","login__item","Field","login__input","component","Input","type","name","validate","required","login__checkboxBlock","onClick","checkboxLogin","checkbox__active","login__captcha","src","login__button","Login","isAuth","logInServerTC","props","to","login","login__title","login__warning","dataForm","email","password","rememberMe","captcha","connect","state","auth","dispatch"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,aAAe,4BAA4B,eAAiB,gC,oBCA3GD,EAAOC,QAAU,CAAC,YAAc,+BAA+B,YAAc,+BAA+B,aAAe,gCAAgC,gBAAkB,mCAAmC,qBAAuB,wCAAwC,iBAAmB,oCAAoC,cAAgB,iCAAiC,cAAgB,iCAAiC,eAAiB,oC,8MC6C5aC,EAAiBC,YAA2C,CAAEC,KAAM,SAAnDD,EAjCwE,SAAC,GAA6C,IAA3CE,EAA0C,EAA1CA,aAAcC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,WAAiB,EAClHC,oBAAkB,GADgG,mBACzIC,EADyI,KAChIC,EADgI,OAEpGF,mBAAQ,UAAYG,IAAEC,kBAF8E,mBAEzIC,EAFyI,KAEzHC,EAFyH,KAGhJ,OACG,uBAAMC,UAAWJ,IAAEK,YAAaC,SAAUZ,EAA1C,UACG,qBAAKU,UAAWJ,IAAEO,YAAlB,SAA+B,cAACC,EAAA,EAAD,CAAOJ,UAAWJ,IAAES,aAAcC,UAAWC,IAAOC,KAAM,QAASC,KAAM,QAASC,SAAUC,QAC3H,qBAAKX,UAAWJ,IAAEO,YAAlB,SAA+B,cAACC,EAAA,EAAD,CAAOJ,UAAWJ,IAAES,aAAcC,UAAWC,IAAOC,KAAM,WAAYC,KAAM,WAAYC,SAAUC,QACjI,qBAAKX,UAAWJ,IAAEO,YAAlB,SACKT,EAQG,kCACC,sBAAKM,UAAWJ,IAAEgB,qBAAsBC,QAAS,WAAQd,EAAkB,GAAD,OAAIH,IAAEC,kBAAoBF,GAAW,IAA/G,UACG,qBAAKK,UAAWF,IAChB,kDAEH,cAACM,EAAA,EAAD,CAAOJ,UAAWJ,IAAEkB,cAAeR,UAAW,QAASE,KAAM,WAAYC,KAAM,aAAcf,QAASA,OAZvG,kCACC,sBAAKM,UAAWJ,IAAEgB,qBAAsBC,QAAS,WAAQd,EAAkB,GAAD,OAAIH,IAAEC,gBAAN,YAAyBD,IAAEmB,mBAAqBpB,GAAW,IAArI,UACG,qBAAKK,UAAWF,IAChB,kDAEH,cAACM,EAAA,EAAD,CAAOJ,UAAWJ,IAAEkB,cAAeR,UAAW,QAASE,KAAM,WAAYC,KAAM,aAAcf,QAASA,SAW/G,gCACIH,GAAa,qBAAKS,UAAWJ,IAAEoB,eAAgBC,IAAKzB,IACpDD,GAAa,qBAAKS,UAAWJ,IAAEO,YAAlB,SAA+B,cAACC,EAAA,EAAD,CAAOJ,UAAWJ,IAAES,aAAcC,UAAW,QAASE,KAAM,QAASC,KAAM,iBAE3H,wBAAQT,UAAWJ,IAAEsB,cAAeV,KAAM,SAA1C,8BClBIW,EAA6B,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,cAAkBC,EAAY,0CAKhF,OAAIF,EACM,cAAC,IAAD,CAAUG,GAAI,aAGrB,sBAAKvB,UAAWJ,IAAE4B,MAAlB,UACG,qBAAKxB,UAAWJ,IAAE6B,aAAlB,mBAGA,qBAAKzB,UAAWJ,IAAE8B,eAAlB,4DAGA,cAACvC,EAAD,CAAgBe,SAfL,SAACyB,GAAiC,IAAD,EACF,CAACA,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,SAC/GV,EAF+C,sBAeR7B,WAAY8B,EAAM9B,WAAYD,UAAW+B,EAAM/B,gBAgB7EyC,uBAPS,SAACC,GACtB,MAAO,CACJ1C,UAAW0C,EAAMC,KAAK3C,UACtBC,WAAYyC,EAAMC,KAAK1C,WACvB4B,OAAQa,EAAMC,KAAKd,WATE,SAACe,GACzB,MAAO,CACJd,cAAe,SAACO,EAAeC,EAAkBC,EAAqBC,GAAsBI,EAASd,YAAcO,EAAOC,EAAUC,EAAYC,QAUvIC,CAA6Cb","file":"static/js/6.8a988378.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__1Ljrk\",\"login__title\":\"Login_login__title__1p6ih\",\"login__warning\":\"Login_login__warning__2IgUm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login__form\":\"LoginForm_login__form__3Qu-U\",\"login__item\":\"LoginForm_login__item__24SHY\",\"login__input\":\"LoginForm_login__input__pFU4O\",\"login__checkbox\":\"LoginForm_login__checkbox__1g-9G\",\"login__checkboxBlock\":\"LoginForm_login__checkboxBlock__3fN5c\",\"checkbox__active\":\"LoginForm_checkbox__active__10e8-\",\"checkboxLogin\":\"LoginForm_checkboxLogin__1x_HN\",\"login__button\":\"LoginForm_login__button__19CmG\",\"login__captcha\":\"LoginForm_login__captcha__38wzP\"};","import React from 'react'\r\nimport s from './LoginForm.module.css'\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport { required } from \"../../validators/validators\"\r\nimport { useState } from \"react\"\r\nimport { Input } from \"../Common/FormControl/FormControl\"\r\nimport { DataFormLoginType } from './Login'\r\n\r\ntype OwnPropsType = {\r\n   isCaptcha: boolean,\r\n   urlCaptcha: string | null\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<DataFormLoginType, OwnPropsType> & OwnPropsType> = ({ handleSubmit, isCaptcha, urlCaptcha }) => {\r\n   const [checked, setChecked] = useState<boolean>(false)\r\n   const [activeCheckbox, setActiveCheckbox] = useState<string>(`${s.login__checkbox}`)\r\n   return (\r\n      <form className={s.login__form} onSubmit={handleSubmit}>\r\n         <div className={s.login__item}><Field className={s.login__input} component={Input} type={'input'} name={'email'} validate={required} /></div>\r\n         <div className={s.login__item}><Field className={s.login__input} component={Input} type={'password'} name={'password'} validate={required} /></div>\r\n         <div className={s.login__item}>\r\n            {!checked\r\n               ? <label>\r\n                  <div className={s.login__checkboxBlock} onClick={() => { setActiveCheckbox(`${s.login__checkbox} ${s.checkbox__active}`); setChecked(true); }} >\r\n                     <div className={activeCheckbox}></div>\r\n                     <span>Remember me</span>\r\n                  </div>\r\n                  <Field className={s.checkboxLogin} component={'input'} type={'checkbox'} name={'rememberMe'} checked={checked} />\r\n               </label>\r\n               : <label>\r\n                  <div className={s.login__checkboxBlock} onClick={() => { setActiveCheckbox(`${s.login__checkbox}`); setChecked(false); }} >\r\n                     <div className={activeCheckbox}></div>\r\n                     <span>Remember me</span>\r\n                  </div>\r\n                  <Field className={s.checkboxLogin} component={'input'} type={'checkbox'} name={'rememberMe'} checked={checked} />\r\n               </label>\r\n            }\r\n         </div>\r\n         <div>\r\n            {isCaptcha && <img className={s.login__captcha} src={urlCaptcha as string} />}\r\n            {isCaptcha && <div className={s.login__item}><Field className={s.login__input} component={'input'} type={'input'} name={'captcha'} /></div>}\r\n         </div>\r\n         <button className={s.login__button} type={'submit'}>To come in</button>\r\n      </form>\r\n   )\r\n}\r\nexport const LoginReduxForm = reduxForm<DataFormLoginType, OwnPropsType>({ form: 'login' })(LoginForm)","import React from 'react'\r\nimport s from './Login.module.css'\r\nimport { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { logInServerTC } from \"../../redux/auth.reducer\"\r\nimport { LoginReduxForm } from \"./LoginForm\"\r\nimport { AppReducerType } from '../../redux/store'\r\nimport { ThunkDispatch } from 'redux-thunk'\r\nimport { AnyAction } from 'redux'\r\nexport type DataFormLoginType = {\r\n   email: string,\r\n   password: string,\r\n   rememberMe: boolean,\r\n   captcha: string\r\n}\r\ntype MapDispatchToProps = {\r\n   logInServerTC: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\ntype MapStateToProps = {\r\n   isCaptcha: boolean,\r\n   isAuth: boolean,\r\n   urlCaptcha: string | null\r\n}\r\ntype PropsType = MapStateToProps & MapDispatchToProps\r\nexport const Login: React.FC<PropsType> = ({ isAuth, logInServerTC, ...props }) => {\r\n   const onSubmit = (dataForm: DataFormLoginType) => {\r\n      let [email, password, rememberMe, captcha] = [dataForm.email, dataForm.password, dataForm.rememberMe, dataForm.captcha]\r\n      logInServerTC(email, password, rememberMe, captcha)\r\n   }\r\n   if (isAuth) {\r\n      return <Redirect to={'/profile'} />\r\n   }\r\n   return (\r\n      <div className={s.login}>\r\n         <div className={s.login__title}>\r\n            Login\r\n         </div>\r\n         <div className={s.login__warning}>\r\n            To view this page, you need to go to the site.\r\n         </div>\r\n         <LoginReduxForm onSubmit={onSubmit} urlCaptcha={props.urlCaptcha} isCaptcha={props.isCaptcha} />\r\n      </div>\r\n   )\r\n}\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>): MapDispatchToProps => {\r\n   return {\r\n      logInServerTC: (email: string, password: string, rememberMe: boolean, captcha: string) => { dispatch(logInServerTC(email, password, rememberMe, captcha)) }\r\n   }\r\n}\r\nconst mapStateToProps = (state: AppReducerType) => {\r\n   return {\r\n      isCaptcha: state.auth.isCaptcha,\r\n      urlCaptcha: state.auth.urlCaptcha,\r\n      isAuth: state.auth.isAuth,\r\n   }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)"],"sourceRoot":""}